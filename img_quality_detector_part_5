import os
from PIL import Image, ImageOps
import numpy as np
import matplotlib.pyplot as plt
import torch, torch.nn as nn, torch.optim as optim


# Image Helpers

def loadImage(folder,number = 50):
    images = []
    count = 0
    file_names = os.listdir(folder)
    for file_name in file_names:
        img = Image.open(folder+"/"+file_name)
        img = ImageOps.grayscale(img)
        img_matrix = np.array(img)

        images.append(img_matrix)
        count += 1
        if count == number:
            break
    return images


def imageToTensor(img):
    img_tensor = torch.from_numpy(img).type(torch.FloatTensor).view(1,500,500)
    return img_tensor
    
    
    
    # Prep the model

model = nn.Sequential(
    nn.Conv2d(in_channels=1, out_channels=32,kernel_size=(20,20),stride=(20,20)),
    nn.Flatten(start_dim=0),
    nn.Linear(in_features=20000,out_features=2),

    )
    
    
original_images = loadImage("images/original")
# blurred_images = loadImage("images/blurred")
lowq_images = loadImage("images/lowq")
# sharppend_images = loadImage("images/sharppend")


x = original_images + lowq_images # 100 [0-49 - good], [50-100 - bad]
y = [[0,1] for _ in range(50)] + [[1,0] for _ in range(50)]


## Pass one image through the CNN
img_tensor = imageToTensor(original_images[2])
output = model(img_tensor)

print(output.shape)

for img in output:
    plt.figure()
    plt.imshow(img.detach())
    
    
## Training setup
criterion = nn.BCEWithLogitsLoss()
optimizer = optim.SGD(model.parameters(), lr = 0.00001)


for epoch in range(100):

    for i in range(len(x)):
        x_tensor = imageToTensor(x[i])
        y_tensor = torch.FloatTensor(y[i])
        
        optimizer.zero_grad()
        
        y_predicted = model(x_tensor)
        
        loss = criterion(y_predicted, y_tensor)
        loss.backward()
        optimizer.step()

    if epoch % 10 == 0:
        print(f"epoch = {epoch:10}, loss={loss:10.8f}")





## Let's test it
correct = 0
for i in range(len(x)):
    x_tensor = imageToTensor(x[i])
    y_predicted = model(x_tensor)
    y_tensor = torch.FloatTensor(y[i])
    if torch.argmax(y_predicted) == torch.argmax(y_tensor):
        correct += 1

# [       0,        1]
# [       1,        0]
# [-21.9586,  21.4666]
accuracy = (correct / len(x)) * 100
print(f"accuracy = {accuracy}")
